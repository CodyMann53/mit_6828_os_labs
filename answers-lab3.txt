1. There would be no way of telling which exception caused the interrupt, and hence all exceptions would have to be handled in the same way. This would
restrict the kernel in being able to handle special cases that could potentially keep the user environment from being killed. For example, if a page fault occurred and 
that section of memory for the user environment's program exists on disk that hasn't been loaded to memory yet due to memory size limitations, the kernel would have no
choice but to kill the user environment, instead of being able to load that section of memory from disk to keep the user environment running.

2. All of the exception traps use a kernel level descriptor privilege, and hence only the kernel can execute the code that is pointed to by the idt. This give user code
the ability to have precise control on how it enters kernel level code, which would remove the protection mechanisms that the kernel needs to provide to
protect against malicious or buggy programs. 
